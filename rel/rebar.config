%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et
%% This is a sample rebar.conf file that shows examples of some of rebar
%% options.

%% == Core ==

%% Additional library directories to add to the code path
{lib_dirs, []}.

%% == Erlang Compiler ==

%% Erlang compiler options
{erl_opts, [{i, "include"}, {src_dirs, ["src"]}, debug_info]}.

%% == EUnit ==

%% Options for eunit:test()
{eunit_opts, []}.

%% Additional compile options for eunit. erl_opts from above is also used
{eunit_compile_opts, []}.

%% Whether to enable coverage reporting. Default is `false'
{cover_enabled, true}.

%% == Dialyzer ==

%% Options for running the dialyzer, right now only `plt' is supported
{dialyzer_opts, []}.

%% == Cleanup ==

%% Which files to cleanup
%{clean_files, ["file", "file2"]}.

%% == Reltool ==

%% Target directory for the release
{target, "target"}.

%% == OTP Applications ==

%% Binaries to link into the erlang path?
%{app_bin, []}.

%% == Dependancies ==

%% Where to put any downloaded depandencies. Default is `deps'
%{deps_dir, ["deps"]}.

%% What dependancies we have, depandencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision). Rebar currently support git, hg, bzr and svn.
%% {deps, [application_name, {application_name, "1.0.*"},
%%         {application_name, "1.0.*"},
%%         {hg, "http://bitbucket.org/basho/rebar/", "f3626d5858a6"}]}.

%% == Subdirectories ==

%% Subdirectories?
{sub_dirs, ["rel"]}.
